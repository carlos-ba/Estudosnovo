import streamlit as st
from openai import OpenAI
from typing import Dict, Any


# Configura√ß√£o da API OpenAI usando apenas secrets do Streamlit
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])



# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Diagn√≥stico Inteligente - Refrigera√ß√£o",
    page_icon="‚ùÑÔ∏è",
    layout="wide"
)

# Configura√ß√£o da API OpenAI usando secrets
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])



def criar_prompt_sistema() -> str:
    return """Voc√™ √© um t√©cnico especialista em refrigera√ß√£o com mais de 20 anos de experi√™ncia em diagn√≥stico e manuten√ß√£o de sistemas de refrigera√ß√£o e ar condicionado.

    CONTEXTO T√âCNICO:
    - Voc√™ possui conhecimento profundo em sistemas split, janela, self contained, VRF e chillers
    - Voc√™ entende completamente sobre ciclos de refrigera√ß√£o, compressores, condensadores, evaporadores e v√°lvulas de expans√£o
    - Voc√™ domina diagn√≥sticos relacionados a problemas el√©tricos, mec√¢nicos e de fluido refrigerante

    FORMATO DA AN√ÅLISE:
    1. Diagn√≥stico Prov√°vel:
       - Liste os problemas mais prov√°veis em ordem de probabilidade
       - Indique o n√≠vel de gravidade (Baixo/M√©dio/Alto)
       - Estime a urg√™ncia do reparo

    2. Causas Detalhadas:
       - Liste todas as poss√≠veis causas
       - Explique a rela√ß√£o entre causa e sintoma
       - Mencione fatores agravantes

    3. Solu√ß√µes Recomendadas:
       - Provid√™ncias imediatas que o usu√°rio pode tomar
       - Procedimentos t√©cnicos necess√°rios
       - Estimativa de complexidade do reparo (Simples/Intermedi√°rio/Complexo)
       - Indica√ß√£o se requer t√©cnico especializado

    4. Manuten√ß√£o Preventiva:
       - A√ß√µes espec√≠ficas para prevenir reincid√™ncia
       - Frequ√™ncia recomendada de manuten√ß√µes
       - Cuidados di√°rios/semanais/mensais
       - Sinais de alerta para monitorar

    5. Informa√ß√µes de Seguran√ßa:
       - Alertas sobre riscos espec√≠ficos
       - Precau√ß√µes necess√°rias
       - Situa√ß√µes que exigem aten√ß√£o imediata"""


def obter_resposta_gpt(descricao: str) -> str:
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": criar_prompt_sistema()},
                {"role": "user", "content": descricao}
            ],
            temperature=0.4,
            max_tokens=1000
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Erro ao processar a solicita√ß√£o: {str(e)}")
        return None


def criar_sidebar():
    with st.sidebar:
        st.header("‚ÑπÔ∏è Informa√ß√µes do Equipamento")

        fabricante = st.text_input("Fabricante do Equipamento:")
        modelo = st.text_input("Modelo:")
        idade = st.number_input("Idade do Equipamento (anos):", min_value=0, max_value=50)

        return {
            "fabricante": fabricante,
            "modelo": modelo,
            "idade": idade
        }


def main():
    st.title("üîß Diagn√≥stico Inteligente - Refrigera√ß√£o")
    st.markdown("### Sistema de Aux√≠lio ao Diagn√≥stico de Problemas em Refrigera√ß√£o")

    # Informa√ß√µes do equipamento na sidebar
    info_equipamento = criar_sidebar()

    # √Årea principal
    col1, col2 = st.columns(2)

    with col1:
        tipo_equipamento = st.selectbox(
            "Tipo de Equipamento:",
            ["Ar Condicionado Split", "Ar Condicionado de Janela",
             "Geladeira/Freezer", "C√¢mara Frigor√≠fica",
             "Bebedouro", "Sistema VRF", "Chiller"]
        )

        tempo_problema = st.selectbox(
            "Dura√ß√£o do Problema:",
            ["Come√ßou agora", "Alguns dias", "Algumas semanas", "Mais de um m√™s"]
        )

    with col2:
        manutencao_recente = st.radio(
            "Realizou manuten√ß√£o recentemente?",
            ["Sim", "N√£o"]
        )

        if manutencao_recente == "Sim":
            ultima_manutencao = st.date_input("Data da √∫ltima manuten√ß√£o:")

    # √Årea de descri√ß√£o do problema
    descricao = st.text_area(
        "Descreva detalhadamente o problema observado:",
        height=150,
        placeholder=f"Ex: O {tipo_equipamento.lower()} est√° apresentando..."
    )

    # Sintomas espec√≠ficos
    st.subheader("Sintomas Espec√≠ficos")
    col3, col4, col5 = st.columns(3)

    with col3:
        ruido_anormal = st.checkbox("Ru√≠do Anormal")
        vazamento = st.checkbox("Vazamento")

    with col4:
        baixo_rendimento = st.checkbox("Baixo Rendimento")
        odor_estranho = st.checkbox("Odor Estranho")

    with col5:
        vibracao = st.checkbox("Vibra√ß√£o Excessiva")
        formacao_gelo = st.checkbox("Forma√ß√£o de Gelo")

    # Bot√£o de an√°lise
    if st.button("üîç Analisar Problema", use_container_width=True):
        if descricao:
            # Preparar contexto completo
            sintomas = []
            if ruido_anormal: sintomas.append("Ru√≠do Anormal")
            if vazamento: sintomas.append("Vazamento")
            if baixo_rendimento: sintomas.append("Baixo Rendimento")
            if odor_estranho: sintomas.append("Odor Estranho")
            if vibracao: sintomas.append("Vibra√ß√£o Excessiva")
            if formacao_gelo: sintomas.append("Forma√ß√£o de Gelo")

            contexto_completo = f"""
            INFORMA√á√ïES DO EQUIPAMENTO:
            - Tipo: {tipo_equipamento}
            - Fabricante: {info_equipamento['fabricante']}
            - Modelo: {info_equipamento['modelo']}
            - Idade: {info_equipamento['idade']} anos

            HIST√ìRICO DO PROBLEMA:
            - Tempo de ocorr√™ncia: {tempo_problema}
            - Manuten√ß√£o recente: {manutencao_recente}

            SINTOMAS MARCADOS:
            {', '.join(sintomas)}

            DESCRI√á√ÉO DETALHADA:
            {descricao}
            """

            with st.spinner("Analisando o problema..."):
                response = obter_resposta_gpt(contexto_completo)

                if response:
                    st.success("An√°lise conclu√≠da!")
                    st.markdown("### üìã Diagn√≥stico T√©cnico:")
                    st.markdown(response)
        else:
            st.warning("Por favor, descreva o problema antes de solicitar a an√°lise.")

    # Rodap√©
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center'>
        <small>Este √© um sistema de aux√≠lio ao diagn√≥stico. Para problemas graves, consulte sempre um t√©cnico qualificado.</small>
        </div>
        """,
        unsafe_allow_html=True
    )


if __name__ == "__main__":
    main()